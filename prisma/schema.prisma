// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String            @unique
  emailVerified   DateTime?
  accountComplete Boolean           @default(false) @db.Bool
  role            Role              @default(JOB_SEEKER)
  hashedPassword  String?
  image           String?
  location        String?
  bio             String?
  company         String?
  skills          String[]
  projects        Project[]
  workExperience  Work_Experience[]
  education       Education[]
  links           Links?
  accounts        Account[]
  sessions        Session[]
  resume          String?
  jobsApplied     Job[]             @relation("AppliedJobs")
  jobsPosted      Job[]             @relation("PostedJobs")
}

model Job {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String   @db.String
  description    String   @db.String
  qualifications String   @db.String
  skills         String[] @db.String
  level          Level
  company        String   @db.String
  location       String   @db.String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  PostedBy       User?    @relation(name: "PostedJobs", fields: [recruiterId], references: [id])
  AppliedBy      User?    @relation(name: "AppliedJobs", fields: [usersId], references: [id])
  usersId        String[] @db.ObjectId
  recruiterId    String?  @db.ObjectId
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   @db.String
  description String   @db.String
  skills      String[] @db.String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.ObjectId
}

model Work_Experience {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   @db.String
  company     String   @db.String
  location    String   @db.String
  startDate   DateTime @default(now())
  endDate     DateTime @default(now())
  description String?  @db.String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.ObjectId
}

model Education {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  school    String   @db.String
  degree    String   @db.String
  location  String   @db.String
  startDate DateTime @default(now())
  endDate   DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

enum Level {
  JUNIOR
  MIDDLE
  SENIOR
  MANAGER
}

enum Role {
  RECRUITER
  JOB_SEEKER
}

type Links {
  github   String?
  linkedin String?
  twitter  String?
  website  String?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
